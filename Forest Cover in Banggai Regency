// Moh. MUsi Amal 
// contack me if u have a project and want to fix it (@Musiamal40@gmail.com)
//import your data or shp data if u have to filterbound ur area

var outline = ee.Image().byte().paint({
  featureCollection: aoi,
  color: 1,
  width: 3
});

Map.addLayer(outline, {palette: ['black']}, "Study Area");

Map.centerObject(aoi, 12) 

function maskS2clouds(image) {
  var qa = image.select('QA60'); 
 
  var cloudBitMask = 1 << 10;
  var cirrusBitMask = 1 << 11;

  var mask = qa.bitwiseAnd(cloudBitMask).eq(0)
      .and(qa.bitwiseAnd(cirrusBitMask).eq(0));

  return image.updateMask(mask).divide(10000);
}
  
var sentinel_2 = ee.ImageCollection('COPERNICUS/S2')
                  .filterDate('2018-12-01', '2020-12-31') 
                  .filter(ee.Filter.lt('CLOUDY_PIXEL_PERCENTAGE', 70))
                  .filterBounds(aoi)
                  .map(maskS2clouds)
                  .median() 

var rgbVis = {
  min: 0.004,
  max: 0.39,
  bands: ['B11', 'B8', 'B4'],
  gamma: 0.4 ,
};

//---------------------band-band -----------------------//
//B1
var B1 = sentinel_2.expression('Aeorosol', {
  'Aeorosol': sentinel_2.select('B1')
});
//B2
var B2 = sentinel_2.expression('Blue', {
  'Blue': sentinel_2.select('B2')
});
//B3
var B3 = sentinel_2.expression('Green', {
  'Green': sentinel_2.select('B3')
});
//B4
var B4 = sentinel_2.expression('Red', {
  'Red': sentinel_2.select('B4')
});
//B5
var B5 = sentinel_2.expression('RE1', {
  'RE1': sentinel_2.select('B5')
});
//B6
var B6 = sentinel_2.expression('RE2', {
  'RE2': sentinel_2.select('B6')
});
//B7
var B7 = sentinel_2.expression('RE', {
  'RE': sentinel_2.select('B7')
});
//B8
var B8 = sentinel_2.expression('NIR', {
  'NIR': sentinel_2.select('B8')
});
//B8A
var B8A = sentinel_2.expression('NIRn', {
  'NIRn': sentinel_2.select('B8A')
});
//B9
var B9 = sentinel_2.expression('Vapor', {
  'Vapor': sentinel_2.select('B9')
});
//B10
var B10 = sentinel_2.expression('Cirrus', {
  'Cirrus': sentinel_2.select('B10')
});
//B11
var B11 = sentinel_2.expression('SWIR1', {
  'SWIR1': sentinel_2.select('B11')
});
//B12
var B12 = sentinel_2.expression('SWIR2', {
  'SWIR2': sentinel_2.select('B12')
});

//----------------------------------indeks--------------//

//NDVI
var ndvi = sentinel_2.expression('(NIR - Red) / (NIR + Red)', {
  'NIR': sentinel_2.select('B8'),
  'Red': sentinel_2.select('B4')
});

//MNDVI
var mndvi = sentinel_2.expression('(RE2 - RE1) / (RE2 + RE1)', {
  'RE2': sentinel_2.select('B6'),
  'RE1': sentinel_2.select('B5')
});

//NDTI
var ndti = sentinel_2.expression('(Red - Green) / (Red + Green)', {
  'Red': sentinel_2.select('B4'),
  'Green': sentinel_2.select('B3')
});

//Green normalized difference vegetation index (GNDVI)
var gndvi = sentinel_2.expression('(NIR - Green) / (NIR + Green)', {
  'Green': sentinel_2.select('B3'),
  'NIR': sentinel_2.select('B8')
});


//Specific Leaf Area Vegetation Index (SLAVI)
var slavi = sentinel_2.expression('(NIR) / (Red + SWIR)', {
  'NIR': sentinel_2.select('B8'),
  'Red': sentinel_2.select('B4'),
  'SWIR': sentinel_2.select('B12')
});

//Enhanced Vegetation Index (EVI)
var evi = sentinel_2.expression('((NIR - Red) / ((NIR + 6) * (Red - 7.5) * (Blue + 1))) * 2.5', {
  'NIR': sentinel_2.select('B8'),
  'Red': sentinel_2.select('B4'),
  'Blue': sentinel_2.select('B2')
});

//SAVI
var savi = sentinel_2.expression('((NIR - Red) / (NIR + Red +0.5)) * (1.0+0.5)', {
  'NIR': sentinel_2.select('B8'),
  'Red': sentinel_2.select('B4')
});

//Atmospherically Resistant Vegetation Index (ARVI)
var arvi = sentinel_2.expression('(NIR - (Red - (1 * (Red - Blue)))) / (NIR + (Red - (1 * (Red - Blue))))', {
  'NIR': sentinel_2.select('B8'),
  'Red': sentinel_2.select('B4'),
  'Blue': sentinel_2.select('B2')
});

//NDWI
var ndwi = sentinel_2.expression('(Green - NIR) / (Green + NIR)', {
  'NIR': sentinel_2.select('B8'),
  'Green': sentinel_2.select('B3')
});

//Land Surface Water Index (LSWI)
var lswi = sentinel_2.expression('(NIR - SWIR) / (NIR + SWIR)', {
  'SWIR': sentinel_2.select('B12'),
  'NIR': sentinel_2.select('B8')
});

//Modified Normalized Difference Water Index (MNDWI)
var mndwi = sentinel_2.expression('(Green - SWIR) / (Green + SWIR)', {
  'SWIR': sentinel_2.select('B12'),
  'Green': sentinel_2.select('B3')
});

//Augmented Normalized Difference Water Index (ANDWI)
var andwi = sentinel_2.expression('(Blue + Green + Red - NIR - SWIR1 - SWIR2) / (Blue + Green + Red + NIR + SWIR1 + SWIR2)',{
  'SWIR1': sentinel_2.select('B11'),
  'SWIR2': sentinel_2.select('B12'),
  'Green': sentinel_2.select('B3'),
  'Red': sentinel_2.select('B4'),
  'Blue': sentinel_2.select('B2'),
  'NIR': sentinel_2.select('B8')
});

//Index-Based Built-Up Area Index (IBI)
var ibi = sentinel_2.expression('(((SWIR / (SWIR * NIR)) * 2) - ((NIR / (NIR + Red)) + (Green/(Green + SWIR)))) / (((SWIR / (SWIR * NIR)) * 2) + ((NIR / (NIR + Red)) + (Green/(Green + SWIR))))', {
  'SWIR': sentinel_2.select('B11'),
  'NIR': sentinel_2.select('B8'),
  'Red': sentinel_2.select('B4'),
  'Green': sentinel_2.select('B3')
});

//Normalized Difference Built Up Index (NDBI)
var ndbi = sentinel_2.expression('(SWIR1- NIR) / (SWIR1 + NIR)', {
  'SWIR1': sentinel_2.select('B11'),
  'NIR': sentinel_2.select('B8')
});   

//Inverted Red-Edge Chlorophyll Index (IRECI)
var ireci = sentinel_2.expression('(NIR - Red) / (R1 + R2)', {
  'NIR': sentinel_2.select('B7'),
  'Red': sentinel_2.select('B4'),
  'R1': sentinel_2.select('B5'),
  'R2': sentinel_2.select('B6')
});

//Normalized Difference Chlorophyll Index (NDCI) 
var ndci = sentinel_2.expression('(Red - RE)/(Red + RE)',{
  'RE': sentinel_2.select('B5'),
  'Red': sentinel_2.select('B4')
});

//Normalized Difference Moisture Index (NDMI)
var ndmi = sentinel_2.expression('(Red - SWIR1)/(Red + SWIR1)',{
  'Red': sentinel_2.select('B8'),
  'SWIR1': sentinel_2.select('B11')
});

//Normalized Difference Red-Edge (NDRE)
var ndre = sentinel_2.expression('(NIR - RE)/(NIR + RE)',{
  'RE': sentinel_2.select('B5'),
  'NIR': sentinel_2.select('B8')
});

//ReCI (Red Edge Chlorophyll Index)
var reci = sentinel_2.expression('(NIR/RE)-1',{
  'RE': sentinel_2.select('B5'),
  'NIR': sentinel_2.select('B8')
}); 
 
//PSSRa (Pigment-Specific Simple Ratio Index)
var pssra = sentinel_2.expression('(NIR)/(Red)',{
  'NIR': sentinel_2.select('B8'),
  'Red': sentinel_2.select('B4')
});

//MCARI (Modified Chlorophyll Absorption Ratio Index)
var mcari = sentinel_2.expression('((NIR - Red)-0.2*(NIR - Green))*(NIR / Red) ',{
  'NIR': sentinel_2.select('B8'),
  'Red': sentinel_2.select('B4'),
  'Green': sentinel_2.select('B3')
});

//CARI (Chlorophyll Absorption Ratio Index)
var cari = sentinel_2.expression('((RE - Red)-0.2*(RE - Green))*(RE / Red) ',{
  'RE': sentinel_2.select('B5'),
  'Red': sentinel_2.select('B4'),
  'Green': sentinel_2.select('B3')
});

//RVI (Ratio vegetation index)
var rvi = sentinel_2.expression('(NIR / Red)', {
  'Red': sentinel_2.select('B4'),
  'NIR': sentinel_2.select('B8')
});

//Difference vegetation index (DVI)
var dvi = sentinel_2.expression('(NIRn / Red)', {
  'Red': sentinel_2.select('B4'),
  'NIRn': sentinel_2.select('B9')
});  
//Modified Normalized Difference Water Index (MNDWI)
var mmri = sentinel_2.expression('(((Green - SWIR) / (Green + SWIR)) - ((NIR - Red) / (NIR + Red))) / (((Green - SWIR) / (Green + SWIR)) + ((NIR - Red) / (NIR + Red)))', {
  'SWIR': sentinel_2.select('B12'),
  'NIR': sentinel_2.select('B8'),
  'Green': sentinel_2.select('B3'),
  'Red': sentinel_2.select('B4')
});

var final_image = sentinel_2.addBands(ndvi.rename('NDVI'))
                            .addBands(mndvi.rename('MNDVI'))
                            .addBands(ndti.rename('NDTI'))
                            .addBands(gndvi.rename('GNDVI'))
                            .addBands(ndwi.rename('NDWI'))
                            .addBands(savi.rename('SAVI'))
                            .addBands(evi.rename('EVI'))
                            .addBands(ibi.rename('IBI'))
                            .addBands(dvi.rename('DVI'))
                            .addBands(rvi.rename('RVI'))
                            .addBands(arvi.rename('ARVI'))
                            .addBands(slavi.rename('SLAVI'))
                            .addBands(ndbi.rename('NDBI')) 
                            .addBands(lswi.rename('LSWI'))
                            .addBands(mndwi.rename('MNDWI'))
                            .addBands(andwi.rename('ANDWI'))
                            .addBands(ndci.rename('NDCI'))
                            .addBands(ndmi.rename('NDMI'))
                            .addBands(ndre.rename('NDRE'))
                            .addBands(reci.rename('RECI')) 
                            .addBands(pssra.rename('PSSRA'))
                            .addBands(mcari.rename('MCARI'))
                            .addBands(cari.rename('CARI'))   
                            .addBands(B1.rename('B1'))
                            .addBands(B2.rename('B2'))
                            .addBands(B3.rename('B3'))
                            .addBands(B4.rename('B4'))
                            .addBands(B5.rename('B5'))
                            .addBands(B6.rename('B6'))
                            .addBands(B7.rename('B7'))
                            .addBands(B8.rename('B8'))
                            .addBands(B8A.rename('B8A'))
                            .addBands(B9.rename('B9'))
                            .addBands(B10.rename('B10'))
                            .addBands(B11.rename('B11'))
                            .addBands(B12.rename('B12'));

var bands = ['NDVI', 'GNDVI', 'MNDVI', 'EVI', 'SAVI', 'IBI', 'ARVI', 'SLAVI', 'LSWI', 'MNDWI', 'ANDWI'];

print(final_image);
Map.addLayer(final_image.clip(aoi), rgbVis, 'composite');

var bands = ['NDVI', 'GNDVI', 'MNDVI', 'EVI', 'SAVI', 'IBI', 'ARVI', 'SLAVI', 'LSWI', 'MNDWI', 'ANDWI'];

print(final_image);
Map.addLayer(final_image.clip(aoi), rgbVis, 'NDVI 2020-2022');

/*var trainingPoly =NonWater.merge(Water);
print(trainingPoly, 'trainingPoly'); */

// 0 = Air
// 1 = Mgv 
// 2 = Rawa
// 3 = Tanah 
// 4 = Rumah
// 5 = Sawah

var train = 0.7;  // Roughly 70% training
var val = 0.3;  // 30% validasi
/*var training = trainingPoly.filter(ee.Filter.lt('random', train));
var validation = trainingPoly.filter(ee.Filter.gte('random', val));
*/
/*var training = final_image.select(bands).sampleRegions({
  collection: trainingPoly,
  properties: ['Landuse','GEE_ID'],
  scale: 30
});*/

/*var classifier = ee.Classifier.smileRandomForest(10).train({
  features: training,
  classProperty: 'GEE_ID',
  inputProperties: bands
});

var classified = final_image.select(bands).classify(classifier);
*/
/*var palette = [
  '006a4e', // KJ_vgt (1)// hijau 
  '0a01ff', // KJ_air(0)  // biru
];

Map.addLayer(classified.clip(aoi), {min: 0, max: 1, palette: palette}, 'Land Use Classification');
*/
// Calculate the maximum NDVI value within the AOI
var ndviMax = ee.Number(ndvi.reduceRegion({
  reducer   : ee.Reducer.max(),
  geometry  : clip(aoi),
  scale     : 10,
  maxPixels : 1e9
}).values().get(0));

// Define forest cover threshold (e.g., NDVI > 0.3)
var forestCover = ndvi.gt(0.5);

// Calculate the area of forest cover within the AOI
var forestArea = forestCover.multiply(ee.Image.pixelArea())
  .reduceRegion({
    reducer: ee.Reducer.sum(),
    geometry: clip(aoi),
    scale: 10, // Scale in meters (Sentinel-2 resolution)
    maxPixels: 1e9
  });

// Convert the area from square meters to hectares
var forestAreaHa = ee.Number(forestArea.get('NDVI')).divide(10000);

print('Forest area in hectares:', forestAreaHa);

// Visualize the forest cover
Map.centerObject(aoi, 10);
Map.addLayer(forestCover.updateMask(forestCover), {palette: '00FF00'}, 'Forest Cover');
Map.addLayer(aoi, {color: 'red'}, 'AOI');
Map.addLayer(
    ndti.clip(aoi),
    {min: -0.2, max: 0.74, palette: ['#0000ff','#ff0000', '#ffc112', '#ffff00', '#00ff00', '#0e8b0c', '#175216']},
    'NDTI', false);

Map.addLayer(
    mndwi.clip(aoi),
    {min: -0.2, max: 0.74, palette: ['#0000ff','#ff0000', '#ffc112', '#ffff00', '#00ff00', '#0e8b0c', '#175216']},
    'MNDWI', false);

Map.addLayer(
    ndvi.clip(aoi),
    {min: -0.2, max: 0.74, palette: ['#0000ff','#ff0000', '#ffc112', '#ffff00', '#00ff00', '#0e8b0c', '#175216']},
    'NDVI', false);

Map.addLayer(
    ndbi.clip(aoi),
    {min: -0.2, max: 0.74, palette: ['#0000ff','#ff0000', '#ffc112', '#ffff00', '#00ff00', '#0e8b0c', '#175216']},
    'NDBI', false);

//export to drive 
Export.image.toDrive({
  image: ndvi.clip(aoi),
  region: aoi,
  description: 'NDVI_2018-2020',
  folder: 'GEE',
  scale: 10,
  maxPixels: 10E11,
  fileFormat: 'GeoTIFF',
}); 

/*var trainingPoly_V =NonWater.merge(Water);
print(trainingPoly_V, 'trainingPoly_V'); 

//accuracy
var validasi = classified.sampleRegions({
  collection: trainingPoly_V,
  properties: ['GEE_ID'],
  scale: 30,
});
print(validasi);

var akurasi = validasi.errorMatrix('GEE_ID', 'classification');
print('Confusion matrix', akurasi);
print('Overall accuracy: ', akurasi.accuracy());
print('Koefisien Kappa: ', akurasi.kappa());
print('User Accuracy: ', akurasi.producersAccuracy());
print('Producer Accuracy: ', akurasi.consumersAccuracy());
*/
